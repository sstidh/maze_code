{"entries":[{"timestamp":1743615567697,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"15\" y=\"-148\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field"],[1,"pxt-on-start\" x=\"1\" y=\"-150\"><statement name=\"HANDLER\"><block type=\"CutebotPro_setBlockCnt\"><field name=\"CutebotProDistanceUnits\">CutebotProDistanceUnits.Cm</field><value name=\"length\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"1\" y=\"-10\"><statement name=\"HANDLER\"><block type=\"CutebotPro_runBlockCnt\"><value name=\"cnt\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"CutebotPro_trolleySteering\"><field name=\"CutebotProTurn\">CutebotProTurn.RightInPlace</field><field name=\"CutebotProAngle\">CutebotProAngle.Angle90</field><next><block type=\"CutebotPro_runBlockCnt\"><value name=\"cnt\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"CutebotPro_trolleySteering\"><field name=\"CutebotProTurn\">CutebotProTurn.RightInPlace</field><field name=\"CutebotProAngle\">CutebotProAngle.Angle90</field><next><block type=\"CutebotPro_runBlockCnt\"><value name=\"cnt\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></statement"],[0,"></b"]],"start1":294,"start2":294,"length1":140,"length2":1175}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"CutebotPro.setBlockCnt(30, CutebotProDistanceUnits.Cm)\nbasic.forever(function () {\n    CutebotPro.runBlockCnt(2)\n    CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle90)\n    CutebotPro.runBlockCnt(2)\n    CutebotPro.trolleySteering(CutebotProTurn.RightInPlace, CutebotProAngle.Angle90)\n    CutebotPro.runBlockCnt(1)\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":346}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\""],[0,"\n   "]],"start1":293,"start2":293,"length1":27,"length2":8}]},{"type":"added","filename":"main.py","value":"CutebotPro.set_block_cnt(30, CutebotProDistanceUnits.CM)\n\ndef on_forever():\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(1)\nbasic.forever(on_forever)\n"}]},{"timestamp":1743615688096,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"nic\""],[-1," id=\"nCx;lv9*9qt*yqO:Ss6|\""],[0," dis"]],"start1":305,"start2":305,"length1":34,"length2":8}]}]},{"timestamp":1744043853352,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"rasonic\""],[1," id=\"nCx;lv9*9qt*yqO:Ss6|\""],[0," disable"]],"start1":301,"start2":301,"length1":16,"length2":42},{"diffs":[[0," x=\""],[-1,"0"],[1,"15"],[0,"\" y=\""],[-1,"0"],[1,"-148"],[0,"\"><f"]],"start1":387,"start2":387,"length1":15,"length2":19}]}]},{"timestamp":1744043853963,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"CutebotPro.set_block_cnt(30, CutebotProDistanceUnits.CM)\n\ndef on_forever():\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(1)\nbasic.forever(on_forever)"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":374}]}]},{"timestamp":1744216783950,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"py"],[1,"blocks"],[0,"prj\"\n}\n"]],"start1":587,"start2":587,"length1":17,"length2":21}]}]},{"timestamp":1744216783980,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"def mazeNav(mazeStart, ):\n    if mazeStart==True:\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\n    basic.pause(1000)\n\n    path = []\n    first_move_done = False\n\n    def check_distance():\n        return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\n    def turn_left():\n        CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n        basic.pause(100)\n\n    def turn_right():\n        CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n        basic.pause(100)\n\n    def move_forward():\n        CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n        basic.pause(100)\n\n    while True:\n        if not first_move_done:\n            move_forward()\n            path.append(1)\n            first_move_done = True\n            continue\n\n        # Look left\n        turn_left()\n        left = check_distance()\n        basic.pause(100)\n\n        # Face forward again\n        turn_right()\n        front = check_distance()\n        basic.pause(100)\n\n        # Stop if maze ends (huge opening ahead)\n        if front > 100:\n            serial.write_line(\"Maze end detected! Stopping.\")\n            break\n\n        # Look right\n        turn_right()\n        right = check_distance()\n        basic.pause(100)\n\n        # Face forward again\n        turn_left()\n        basic.pause(100)\n\n        # Maze logic\n        if left > 15:\n            turn_left()\n            move_forward()\n            path.append(2)\n        elif front > 15:\n            move_forward()\n            path.append(1)\n        elif right > 15:\n            turn_right()\n            move_forward()\n            path.append(3)\n        else:\n            # Dead end\n            turn_left()\n            turn_left()\n            move_forward()\n            path.append(0)\n\n# Output path after reaching end\n    serial.write_line(\"Maze path taken:\")\n    for step in path:\n        if step == 1:\n            serial.write_line(\"Forward\")\n        elif step == 2:\n            serial.write_line(\"Left\")\n        elif step == 3:\n            serial.write_line(\"Right\")\n        elif step == 0:\n            serial.write_line(\"Backtrack\")\n"],[0,"\n"]],"start1":0,"start2":0,"length1":2176,"length2":1}]}]},{"timestamp":1744216901580,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"eStart=="],[-1,"t"],[1,"T"],[0,"rue:\n   "]],"start1":36,"start2":36,"length1":17,"length2":17},{"diffs":[[0,"ing end\n"],[1,"    "],[0,"serial.w"]],"start1":1848,"start2":1848,"length1":16,"length2":20},{"diffs":[[0,"aken:\")\n"],[1,"    "],[0,"for step"]],"start1":1890,"start2":1890,"length1":16,"length2":20},{"diffs":[[0,"th:\n    "],[1,"  "],[1,"  "],[0,"if step "]],"start1":1916,"start2":1916,"length1":16,"length2":20},{"diffs":[[0,"p == 1:\n"],[1,"    "],[0,"        "]],"start1":1934,"start2":1934,"length1":16,"length2":20},{"diffs":[[0,"rward\")\n"],[1,"    "],[0,"    elif"]],"start1":1975,"start2":1975,"length1":16,"length2":20},{"diffs":[[0,"p == 2:\n        "],[1,"    "],[0,"serial.write_lin"]],"start1":1999,"start2":1999,"length1":32,"length2":36},{"diffs":[[0,"ine(\"Left\")\n"],[1,"    "],[0,"    elif ste"]],"start1":2033,"start2":2033,"length1":24,"length2":28},{"diffs":[[0,"p == 3:\n        "],[1,"  "],[1,"  "],[0,"serial.write_lin"]],"start1":2061,"start2":2061,"length1":32,"length2":36},{"diffs":[[0,"ne(\"Right\")\n"],[1,"    "],[0,"    elif ste"]],"start1":2096,"start2":2096,"length1":24,"length2":28},{"diffs":[[0,"p == 0:\n"],[1,"    "],[0,"        "]],"start1":2124,"start2":2124,"length1":16,"length2":20}]}]},{"timestamp":1744218253029,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"e(100)\n\n"],[1,"    "],[0,"while Tr"]],"start1":675,"start2":675,"length1":16,"length2":20},{"diffs":[[0,"while True:\n"],[1,"    "],[0,"    if not f"]],"start1":687,"start2":687,"length1":24,"length2":28},{"diffs":[[0,"e_done:\n        "],[1,"   "],[1," "],[0,"move_forward()\n "]],"start1":723,"start2":723,"length1":32,"length2":36},{"diffs":[[0," move_forward()\n"],[1,"    "],[0,"        path.app"]],"start1":742,"start2":742,"length1":32,"length2":36},{"diffs":[[0,"(1)\n        "],[1," "],[1,"   "],[0,"first_move_d"]],"start1":781,"start2":781,"length1":24,"length2":28},{"diffs":[[0,"        "],[1,"  "],[1,"  "],[0,"continue"]],"start1":820,"start2":820,"length1":16,"length2":20},{"diffs":[[0,"ntinue\n\n"],[1,"    "],[0,"    # Lo"]],"start1":834,"start2":834,"length1":16,"length2":20},{"diffs":[[0,"ok left\n"],[1,"    "],[0,"    turn"]],"start1":854,"start2":854,"length1":16,"length2":20},{"diffs":[[0,"t()\n    "],[1," "],[1,"   "],[0,"left = c"]],"start1":878,"start2":878,"length1":16,"length2":20},{"diffs":[[0,"heck_distance()\n"],[1,"    "],[0,"    basic.pause("]],"start1":898,"start2":898,"length1":32,"length2":36},{"diffs":[[0,"pause(100)\n\n    "],[1,"   "],[1," "],[0,"# Face forward a"]],"start1":928,"start2":928,"length1":32,"length2":36},{"diffs":[[0,"e forward again\n"],[1,"    "],[0,"    turn_right()"]],"start1":953,"start2":953,"length1":32,"length2":36},{"diffs":[[0,"t()\n    "],[1," "],[1,"   "],[0,"front = "]],"start1":986,"start2":986,"length1":16,"length2":20},{"diffs":[[0,"_distance()\n    "],[1,"  "],[1,"  "],[0,"basic.pause(100)"]],"start1":1011,"start2":1011,"length1":32,"length2":36},{"diffs":[[0,"pause(100)\n\n"],[1,"    "],[0,"    # Stop i"]],"start1":1037,"start2":1037,"length1":24,"length2":28},{"diffs":[[0," ahead)\n"],[1,"    "],[0,"    if f"]],"start1":1090,"start2":1090,"length1":16,"length2":20},{"diffs":[[0," > 100:\n        "],[1," "],[1,"   "],[0,"serial.write_lin"]],"start1":1114,"start2":1114,"length1":32,"length2":36},{"diffs":[[0,"    "],[1,"    "],[0,"break\n\n"],[1,"    "],[0,"    "]],"start1":1188,"start2":1188,"length1":15,"length2":23},{"diffs":[[0,"k right\n"],[1,"    "],[0,"    turn"]],"start1":1216,"start2":1216,"length1":16,"length2":20},{"diffs":[[0,"urn_right()\n"],[1,"    "],[0,"    right = "]],"start1":1233,"start2":1233,"length1":24,"length2":28},{"diffs":[[0,"tance()\n    "],[1,"  "],[1,"  "],[0,"basic.pause("]],"start1":1270,"start2":1270,"length1":24,"length2":28},{"diffs":[[0,"pause(100)\n\n"],[1,"    "],[0,"    # Face f"]],"start1":1292,"start2":1292,"length1":24,"length2":28},{"diffs":[[0,"rward again\n"],[1,"    "],[0,"    turn_lef"]],"start1":1321,"start2":1321,"length1":24,"length2":28},{"diffs":[[0,"_left()\n    "],[1," "],[1,"   "],[0,"basic.pause("]],"start1":1345,"start2":1345,"length1":24,"length2":28},{"diffs":[[0,"0)\n\n    "],[1,"   "],[1," "],[0,"# Maze l"]],"start1":1375,"start2":1375,"length1":16,"length2":20},{"diffs":[[0,"e logic\n"],[1,"    "],[0,"    if l"]],"start1":1392,"start2":1392,"length1":16,"length2":20},{"diffs":[[0,"t > 15:\n        "],[1,"    "],[0,"turn_left()\n    "]],"start1":1414,"start2":1414,"length1":32,"length2":36},{"diffs":[[0,"    turn_left()\n"],[1,"    "],[0,"        move_for"]],"start1":1430,"start2":1430,"length1":32,"length2":36},{"diffs":[[0,"rward()\n        "],[1,"   "],[1," "],[0,"path.append(2)\n "]],"start1":1465,"start2":1465,"length1":32,"length2":36},{"diffs":[[0,"pend(2)\n"],[1,"    "],[0,"    elif"]],"start1":1492,"start2":1492,"length1":16,"length2":20},{"diffs":[[0,"t > 15:\n        "],[1,"    "],[0,"move_forward()\n "]],"start1":1517,"start2":1517,"length1":32,"length2":36},{"diffs":[[0,"rward()\n        "],[1," "],[1,"   "],[0,"path.append(1)\n "]],"start1":1544,"start2":1544,"length1":32,"length2":36},{"diffs":[[0,"pend(1)\n    "],[1,"   "],[1," "],[0,"elif right >"]],"start1":1571,"start2":1571,"length1":24,"length2":28},{"diffs":[[0,"lif right > 15:\n"],[1,"    "],[0,"        turn_rig"]],"start1":1588,"start2":1588,"length1":32,"length2":36},{"diffs":[[0,"right()\n        "],[1,"    "],[0,"move_forward()\n "]],"start1":1621,"start2":1621,"length1":32,"length2":36},{"diffs":[[0,"rward()\n        "],[1,"  "],[1,"  "],[0,"path.append(3)\n "]],"start1":1648,"start2":1648,"length1":32,"length2":36},{"diffs":[[0,"    "],[1,"   "],[1," "],[0,"else:\n"],[1,"    "],[0,"    "]],"start1":1683,"start2":1683,"length1":14,"length2":22},{"diffs":[[0,"ead end\n        "],[1," "],[1,"   "],[0,"turn_left()\n    "]],"start1":1712,"start2":1712,"length1":32,"length2":36},{"diffs":[[0,"_left()\n        "],[1,"  "],[1,"  "],[0,"turn_left()\n    "]],"start1":1736,"start2":1736,"length1":32,"length2":36},{"diffs":[[0,"    turn_left()\n"],[1,"    "],[0,"        move_for"]],"start1":1752,"start2":1752,"length1":32,"length2":36},{"diffs":[[0," move_forward()\n"],[1,"    "],[0,"        path.app"]],"start1":1779,"start2":1779,"length1":32,"length2":36}]}]},{"timestamp":1744218253298,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[1,"def mazeNav(mazeStart, ):\n    "],[0,"if mazeStart"]],"start1":0,"start2":0,"length1":12,"length2":42},{"diffs":[[0,"==true:\n"],[1,"    "],[0,"CutebotP"]],"start1":42,"start2":42,"length1":16,"length2":20},{"diffs":[[0,"its.CM)\n"],[1,"    "],[0,"basic.pa"]],"start1":137,"start2":137,"length1":16,"length2":20},{"diffs":[[0,"0)\n\n"],[-1,"N = 5\nM = 6\nfield = []\n"],[1,"    "],[0,"path"]],"start1":164,"start2":164,"length1":31,"length2":12},{"diffs":[[0,"th = []\n"],[1,"    "],[0,"first_mo"]],"start1":174,"start2":174,"length1":16,"length2":20},{"diffs":[[0," False\n\n"],[1,"    "],[0,"def chec"]],"start1":203,"start2":203,"length1":16,"length2":20},{"diffs":[[0,"():\n    "],[1," "],[1,"   "],[0,"return C"]],"start1":233,"start2":233,"length1":16,"length2":20},{"diffs":[[0,"ETERS)\n\n"],[1,"    "],[0,"def turn"]],"start1":290,"start2":290,"length1":16,"length2":20},{"diffs":[[0,"urn_left():\n"],[1,"    "],[0,"    CutebotP"]],"start1":307,"start2":307,"length1":24,"length2":28},{"diffs":[[0,"_PLACE, 95)\n    "],[1,"  "],[1,"  "],[0,"basic.pause(100)"]],"start1":377,"start2":377,"length1":32,"length2":36},{"diffs":[[0,"pause(100)\n\n"],[1,"    "],[0,"def turn_rig"]],"start1":403,"start2":403,"length1":24,"length2":28},{"diffs":[[0,"rn_right():\n"],[1,"    "],[0,"    CutebotP"]],"start1":425,"start2":425,"length1":24,"length2":28},{"diffs":[[0,"CE, 95)\n    "],[1,"   "],[1," "],[0,"basic.pause("]],"start1":500,"start2":500,"length1":24,"length2":28},{"diffs":[[0,"e(100)\n\n"],[1,"    "],[0,"def move"]],"start1":526,"start2":526,"length1":16,"length2":20},{"diffs":[[0,"_forward():\n"],[1,"    "],[0,"    CutebotP"]],"start1":546,"start2":546,"length1":24,"length2":28},{"diffs":[[0,"stanceUnits.CM)\n"],[1,"    "],[0,"    basic.pause("]],"start1":641,"start2":641,"length1":32,"length2":36}]}]},{"timestamp":1744218759418,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"eStart=="],[-1,"T"],[1,"t"],[0,"rue:\nCut"]],"start1":6,"start2":6,"length1":17,"length2":17},{"diffs":[[0," = ["],[-1,"0,0,0"],[0,"]\npa"]],"start1":147,"start2":147,"length1":13,"length2":8},{"diffs":[[0," False\n\n"],[-1,"\n\n\n\n"],[0,"def chec"]],"start1":180,"start2":180,"length1":20,"length2":16}]}]},{"timestamp":1744219499955,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," = 6"],[-1,"\n\nfor "],[0,"\nfie"]],"start1":137,"start2":137,"length1":14,"length2":8}]}]},{"timestamp":1744219560800,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"0)\n\n"],[-1,"#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n#originate empty path taken"],[1,"N = 5\nM = 6\n\nfor \nfield = [0,0,0]"],[0,"\npat"]],"start1":126,"start2":126,"length1":182,"length2":41}]}]},{"timestamp":1744219789653,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"\n\n\n\n"],[-1,"#fill in functions for turning and moving forward (replace later!!)"],[0,"\n\nde"]],"start1":338,"start2":338,"length1":75,"length2":8}]}]},{"timestamp":1744220292872,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," False\n\n"],[-1,"h"],[0,"\n\n#fill "]],"start1":332,"start2":332,"length1":17,"length2":16}]}]},{"timestamp":1744231179907,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"False\n\nh"],[-1,"ee"],[0,"\n\n#fill "]],"start1":333,"start2":333,"length1":18,"length2":16}]}]},{"timestamp":1744231184098,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," False\n\n"],[1,"hee"],[0,"\n\n#fill "]],"start1":332,"start2":332,"length1":16,"length2":19}]}]},{"timestamp":1744231243406,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," False\n\n"],[-1,"he"],[0,"\n\n#fill "]],"start1":332,"start2":332,"length1":18,"length2":16}]}]},{"timestamp":1744232615671,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"False\n\nh"],[1,"e"],[0,"\n\n#fill "]],"start1":333,"start2":333,"length1":16,"length2":17}]}]},{"timestamp":1744232615868,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"E, 1"],[-1,"5.35"],[1,"4"],[0,", Cu"]],"start1":76,"start2":76,"length1":12,"length2":9},{"diffs":[[0,"d(row)\n\n"],[-1,"\n"],[0,"#origina"]],"start1":269,"start2":269,"length1":17,"length2":16},{"diffs":[[0,"lse\n"],[-1,"magnet = False"],[1,"\nh"],[0,"\n\n#f"]],"start1":335,"start2":335,"length1":22,"length2":10},{"diffs":[[0,"ater!!)\n"],[1,"\n"],[0,"def chec"]],"start1":403,"start2":403,"length1":16,"length2":17},{"diffs":[[0,"CE, "],[-1,"30.7"],[1,"25"],[0,", Cu"]],"start1":782,"start2":782,"length1":12,"length2":10},{"diffs":[[0,"0)\n\n"],[-1,"\n"],[0,"while "],[-1,"magnet == Fals"],[1,"Tru"],[0,"e:\n "]],"start1":836,"start2":836,"length1":29,"length2":17},{"diffs":[[0,"\n    if "],[1,"not "],[0,"first_mo"]],"start1":851,"start2":851,"length1":16,"length2":20},{"diffs":[[0,"done"],[-1," == False"],[0,":\n  "]],"start1":874,"start2":874,"length1":17,"length2":8},{"diffs":[[0,"    "],[-1,"CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.8, CutebotProDistanceUnits.CM)\n        basic.pause(100"],[1,"move_forward("],[0,")\n  "]],"start1":884,"start2":884,"length1":124,"length2":21},{"diffs":[[0,"e = True"],[1,"\n        continue"],[0,"\n\n    # "]],"start1":948,"start2":948,"length1":16,"length2":33},{"diffs":[[0,".\")\n    "],[1,"    break"],[0,"\n\n    # "]],"start1":1269,"start2":1269,"length1":16,"length2":25},{"diffs":[[0,"e logic\n"],[-1,"\n"],[0,"    if "],[1,"left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif "],[0,"front > "]],"start1":1445,"start2":1445,"length1":24,"length2":109}]}]},{"timestamp":1744233164394,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"= False:"],[1,"\n    if first_move_done == False:\n        CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.8, CutebotProDistanceUnits.CM)\n        basic.pause(100)\n        path.append(1)\n        first_move_done = True"],[0,"\n\n    # "]],"start1":872,"start2":872,"length1":16,"length2":229}]}]},{"timestamp":1744233236826,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"t == False:\n"],[1,"\n"],[0,"    # Look l"]],"start1":869,"start2":869,"length1":24,"length2":25}]}]},{"timestamp":1744234436332,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," False\n\n"],[-1,"\n"],[0,"#fill in"]],"start1":351,"start2":351,"length1":17,"length2":16}]}]},{"timestamp":1744234695011,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"\")\n    \n"],[-1,"        "],[0,"\n    # L"]],"start1":1177,"start2":1177,"length1":24,"length2":16}]}]},{"timestamp":1744235572965,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"\")\n    \n    "],[1,"    "],[0,"\n    # Look "]],"start1":1177,"start2":1177,"length1":24,"length2":28}]}]},{"timestamp":1744235857632,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"00)\n"],[-1,"    if left > 15:\n        move_forward()\n        path.append(2)\n\n"],[0,"\n   "]],"start1":959,"start2":959,"length1":73,"length2":8},{"diffs":[[0,"ping.\")\n"],[1,"    "],[0,"\n    \n  "]],"start1":1172,"start2":1172,"length1":16,"length2":20}]}]},{"timestamp":1744236446961,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"pend(2)\n"],[-1,"    else:"],[1,"\n"],[0,"\n    # F"]],"start1":1019,"start2":1019,"length1":25,"length2":17},{"diffs":[[0,"d again\n"],[-1,"    "],[0,"    turn"]],"start1":1046,"start2":1046,"length1":20,"length2":16},{"diffs":[[0,"t()\n    "],[-1,"   "],[-1," "],[0,"front = "]],"start1":1067,"start2":1067,"length1":20,"length2":16},{"diffs":[[0,"_distance()\n"],[-1,"    "],[0,"    basic.pa"]],"start1":1088,"start2":1088,"length1":28,"length2":24},{"diffs":[[0,"00)\n"],[-1,"        \n    "],[1,"\n"],[0,"    "]],"start1":1117,"start2":1117,"length1":21,"length2":9},{"diffs":[[0," ahead)\n"],[-1,"        '''\n    "],[0,"    if f"]],"start1":1159,"start2":1159,"length1":32,"length2":16},{"diffs":[[0," > 100:\n"],[-1,"    "],[0,"        "]],"start1":1179,"start2":1179,"length1":20,"length2":16},{"diffs":[[0,".\")\n"],[-1,"        '''\n        if:\n        "],[1,"\n    \n"],[0,"    "]],"start1":1241,"start2":1241,"length1":40,"length2":14},{"diffs":[[0,"k right\n"],[-1,"        "],[0,"    turn"]],"start1":1260,"start2":1260,"length1":24,"length2":16},{"diffs":[[0,"right()\n"],[-1,"        "],[0,"    righ"]],"start1":1277,"start2":1277,"length1":24,"length2":16},{"diffs":[[0,"tance()\n"],[-1,"        "],[0,"    basi"]],"start1":1306,"start2":1306,"length1":24,"length2":16},{"diffs":[[0,"e(100)\n\n"],[1,"    "],[0,"# Face f"]],"start1":1328,"start2":1328,"length1":16,"length2":20}]}]},{"timestamp":1744237028924,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"    "],[-1,"front = check_distance()\n    if fron"],[1,"# Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n    if lef"],[0,"t > 1"],[-1,"6"],[1,"5"],[0,":\n  "]],"start1":882,"start2":882,"length1":50,"length2":101},{"diffs":[[0,".append("],[-1,"1"],[1,"2"],[0,")\n    el"]],"start1":1016,"start2":1016,"length1":17,"length2":17},{"diffs":[[0,"se:\n    "],[-1,"    # Look left"],[1,"# Face forward again"],[0,"\n       "]],"start1":1033,"start2":1033,"length1":31,"length2":36},{"diffs":[[0,"in\n        turn_"],[-1,"lef"],[1,"righ"],[0,"t()\n        left"]],"start1":1059,"start2":1059,"length1":35,"length2":36},{"diffs":[[0,"t()\n        "],[-1,"lef"],[1,"fron"],[0,"t = check_di"]],"start1":1079,"start2":1079,"length1":27,"length2":28},{"diffs":[[0,"    "],[-1,"if left > 16:\n            move_forward()\n            path.append(2)\n        else:\n            # Face forward again\n            turn_right()"],[1,"\n        # Stop if maze ends (huge opening ahead)\n        '''\n        if front > 100:\n            serial.write_line(\"Maze end detected! Stopping.\")\n        '''\n        if:"],[0,"\n   "]],"start1":1145,"start2":1145,"length1":147,"length2":179},{"diffs":[[0,"00)\n"],[-1,"            if righ"],[1,"\n# Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n\n    if fron"],[0,"t > 1"],[-1,"6"],[1,"5"],[0,":\n  "]],"start1":1433,"start2":1433,"length1":33,"length2":103},{"diffs":[[0,"t > 15:\n        "],[1,"move_forward()\n        path.append(1)\n    elif right > 15:\n"],[0,"        turn_rig"]],"start1":1526,"start2":1526,"length1":32,"length2":91},{"diffs":[[0,"urn_right()\n"],[-1,"        "],[0,"        move"]],"start1":1610,"start2":1610,"length1":32,"length2":24},{"diffs":[[0,"d()\n        "],[-1," "],[-1,"       "],[0,"path.append("]],"start1":1641,"start2":1641,"length1":32,"length2":24},{"diffs":[[0,"pend(3)\n"],[-1,"        "],[0,"    else"]],"start1":1660,"start2":1660,"length1":24,"length2":16},{"diffs":[[0,"    "],[-1,"        #Dead end, turn around\n        "],[1,"# Dead end\n        turn_left()\n"],[0,"    "]],"start1":1682,"start2":1682,"length1":47,"length2":39},{"diffs":[[0,"()\n        turn_"],[-1,"righ"],[1,"lef"],[0,"t()\n            "]],"start1":1714,"start2":1714,"length1":36,"length2":35},{"diffs":[[0,"        "],[-1,"   "],[-1,"     "],[0,"move_for"]],"start1":1737,"start2":1737,"length1":24,"length2":16},{"diffs":[[0,"        "],[-1,"  "],[-1,"      "],[0,"path.app"]],"start1":1760,"start2":1760,"length1":24,"length2":16},{"diffs":[[0,"end(0)\n\n"],[-1,"\n"],[0,"# Output"]],"start1":1776,"start2":1776,"length1":17,"length2":16}]}]},{"timestamp":1744237618076,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"    "],[-1,"# Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n    if lef"],[1,"front = check_distance()\n    if fron"],[0,"t > "]],"start1":882,"start2":882,"length1":95,"length2":44},{"diffs":[[0,".append("],[-1,"2"],[1,"1"],[0,")\n    el"]],"start1":965,"start2":965,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"# Face forward again"],[1,"    # Look left"],[0,"\n   "]],"start1":986,"start2":986,"length1":28,"length2":23},{"diffs":[[0,"ft\n        turn_"],[-1,"righ"],[1,"lef"],[0,"t()\n        fron"]],"start1":1003,"start2":1003,"length1":36,"length2":35},{"diffs":[[0,"t()\n        "],[-1,"fron"],[1,"lef"],[0,"t = check_di"]],"start1":1022,"start2":1022,"length1":28,"length2":27},{"diffs":[[0,"\n        if "],[-1,"fron"],[1,"lef"],[0,"t > 16:\n    "]],"start1":1082,"start2":1082,"length1":28,"length2":27},{"diffs":[[0,"path.append("],[-1,"1"],[1,"2"],[0,")\n        el"]],"start1":1144,"start2":1144,"length1":25,"length2":25},{"diffs":[[0,")\n        else:\n"],[1,"            # Face forward again\n            turn_right()\n"],[0,"            # Lo"]],"start1":1157,"start2":1157,"length1":32,"length2":90},{"diffs":[[0,"   #"],[-1," "],[0,"Dead end"],[1,", turn around"],[0,"\n   "]],"start1":1496,"start2":1496,"length1":17,"length2":29},{"diffs":[[0,"0)\n\n"],[-1,"                #Depth first algorithm\n                \n\n\n"],[0,"\n# O"]],"start1":1610,"start2":1610,"length1":66,"length2":8}]}]},{"timestamp":1744238186428,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"#magnet checking function \ndef checkMagnet():\n force= abs(input.magnetic_force(Dimension.X))\n force= abs(input.magnetic_force(Dimension.STRENGTH))<= 325;\n return (force)\n  \n#threshold for maze entrance:\nif 30> abs(252-force):\n   mazeStart= True\n\n\n"],[0,"if m"]],"start1":0,"start2":0,"length1":251,"length2":4},{"diffs":[[0,"d(row)\n\n"],[1,"\n"],[0,"#origina"]],"start1":272,"start2":272,"length1":16,"length2":17},{"diffs":[[0," False\n\n"],[-1,"#"],[1,"\n#fill in "],[0,"function"]],"start1":351,"start2":351,"length1":17,"length2":26},{"diffs":[[0," forward"],[1," (replace later!!)"],[0,"\ndef che"]],"start1":401,"start2":401,"length1":16,"length2":34},{"diffs":[[0,"0)\n\n"],[-1,"#maze navigation"],[0,"\nwhi"]],"start1":854,"start2":854,"length1":24,"length2":8},{"diffs":[[0,"    "],[-1,"force = checkMagnet()\n    if 30> abs(252-force):\n       magnetFound= True"],[1,"# Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n    if left > 16:\n        move_forward()\n        path.append(2)"],[0,"\n   "]],"start1":882,"start2":882,"length1":81,"length2":148},{"diffs":[[0,"lse:"],[-1,"   \n   "],[1,"\n"],[0,"    "],[-1," "],[0,"# "],[-1,"Look left"],[1,"Face forward again"],[0,"\n   "]],"start1":1032,"start2":1032,"length1":31,"length2":33},{"diffs":[[0,"in\n        turn_"],[-1,"lef"],[1,"righ"],[0,"t()\n        left"]],"start1":1059,"start2":1059,"length1":35,"length2":36},{"diffs":[[0,"t()\n        "],[-1,"lef"],[1,"fron"],[0,"t = check_di"]],"start1":1079,"start2":1079,"length1":27,"length2":28},{"diffs":[[0,"\n        if "],[-1,"lef"],[1,"fron"],[0,"t > 16:\n    "]],"start1":1140,"start2":1140,"length1":27,"length2":28},{"diffs":[[0,"end("],[-1,"2)\n        else:\n        # Face forward again\n            turn_right()\n            front = check_distance()\n            basic.pause(100)\n            if front > 16:\n                move_forward()\n                path.append(1)\n    "],[1,"1)\n"],[0,"    "]],"start1":1211,"start2":1211,"length1":238,"length2":11},{"diffs":[[0,")\n        else:\n"],[-1,"    "],[0,"            # Lo"]],"start1":1216,"start2":1216,"length1":36,"length2":32},{"diffs":[[0,"ght\n            "],[-1," "],[-1,"   "],[0,"turn_right()\n   "]],"start1":1253,"start2":1253,"length1":36,"length2":32},{"diffs":[[0,"   turn_right()\n"],[-1,"    "],[0,"            righ"]],"start1":1266,"start2":1266,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"    "],[0,"basic.pause("]],"start1":1319,"start2":1319,"length1":28,"length2":24},{"diffs":[[0,".pause(100)\n"],[-1,"    "],[0,"            "]],"start1":1336,"start2":1336,"length1":28,"length2":24},{"diffs":[[0,"                "],[-1,"    "],[0,"turn_right()\n   "]],"start1":1375,"start2":1375,"length1":36,"length2":32},{"diffs":[[0,"   turn_right()\n"],[-1,"    "],[0,"                "]],"start1":1388,"start2":1388,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1,"    "],[0,"path.append(3)\n "]],"start1":1435,"start2":1435,"length1":36,"length2":32},{"diffs":[[0,"            "],[-1,"  "],[-1,"  "],[0,"else:\n"],[-1,"    "],[0,"            "]],"start1":1466,"start2":1466,"length1":38,"length2":30},{"diffs":[[0,"                "],[-1,"  "],[-1,"  "],[0,"turn_right()\n   "]],"start1":1511,"start2":1511,"length1":36,"length2":32},{"diffs":[[0,"   turn_right()\n"],[-1,"    "],[0,"                "]],"start1":1524,"start2":1524,"length1":36,"length2":32},{"diffs":[[0,"                "],[-1," "],[-1,"   "],[0,"path.append(0)\n\n"]],"start1":1571,"start2":1571,"length1":36,"length2":32},{"diffs":[[0,"end(0)\n\n"],[-1,"    "],[0,"        "]],"start1":1595,"start2":1595,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"    for i in range(len(path)):\n                        if path[i] == 2:\n                            ...\n                        elif path[i] == 3:\n                            ...\n\n"],[0,"\n\n\n\n"]],"start1":1654,"start2":1654,"length1":188,"length2":8}]}]},{"timestamp":1744238679335,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," magnet "],[1,"=="],[0," False:\n"]],"start1":1099,"start2":1099,"length1":16,"length2":18}]}]},{"timestamp":1744242295613,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," magnet "],[-1,"<"],[0," False:\n"]],"start1":1099,"start2":1099,"length1":17,"length2":16}]}]},{"timestamp":1744242297209,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0," return "],[1,"("],[0,"force"],[1,")"],[0,"\n  \n#thr"]],"start1":154,"start2":154,"length1":21,"length2":23},{"diffs":[[0,"ce:\n"],[-1,"magnet = 0\nforce = checkMagnet()\n"],[0,"if 3"]],"start1":199,"start2":199,"length1":41,"length2":8},{"diffs":[[0,"t= True\n"],[-1,"   magnet+=1\n"],[0,"\n\nif maz"]],"start1":237,"start2":237,"length1":29,"length2":16},{"diffs":[[0,"==True:\n"],[-1,"    "],[0,"CutebotP"]],"start1":259,"start2":259,"length1":20,"length2":16},{"diffs":[[0,"stanceUnits.CM)\n"],[-1,"    "],[0,"basic.pause(1000"]],"start1":345,"start2":345,"length1":36,"length2":32},{"diffs":[[0,"e\nma"],[-1,"ze_exi"],[1,"gne"],[0,"t = "]],"start1":587,"start2":587,"length1":14,"length2":11},{"diffs":[[0,"tion"],[-1," before exit magnet is located "],[0,"\nwhi"]],"start1":1089,"start2":1089,"length1":39,"length2":8},{"diffs":[[0,"agnet < "],[-1,"3"],[1,"False"],[0,":\n    fo"]],"start1":1101,"start2":1101,"length1":17,"length2":21},{"diffs":[[0,"t()\n"],[-1,"    #magnet found\n"],[0,"    "]],"start1":1138,"start2":1138,"length1":26,"length2":8},{"diffs":[[0,"gnet"],[-1,"+=1\n       #magnet inside maze located\n       if magnet == 2:\n           path.append(4)\n\n    #continue maze navigation"],[1,"Found= True"],[0,"\n   "]],"start1":1178,"start2":1178,"length1":126,"length2":19}]}]},{"timestamp":1744242827875,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"## LINE FOLLOWING\n#set variables\nlwheel = 20\nrwheel = 20\nerror = 0\n# which line are we following:\nline = -1 # 0 is left, 1 is right\nmaxturnspeed = 50\n\n#magnet present\nmag = 0\n\n# set starting speed\nCutebotPro.pwm_cruise_control(lwheel, rwheel)\nbasic.pause(50)\n \ndef turn_right():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel + (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel - (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\ndef turn_left():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel - (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel + (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\n     \ndef magnet():\n    global mag\n    if abs(input.magnetic_force(Dimension.X)) >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n \n\ndef follow_line():\n    global lwheel, rwheel, error, line\n \n    # get the line offset\n    error = CutebotPro.get_offset()\n \n    # make the left side of line the center\n    # error = error + 1000\n \n    # if detects no line\n    if abs(error) == 3000:\n        lwheel = 0\n        rwheel = 0\n \n         #turn on both headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n     # if detects a big line\n     #### Intersection ####\n     # if detects a big line (error is less than 100)\n    if abs(error) < 100:\n        if error > 0: # robot is to the left of intersection (make a big right turn)\n            error = 3000/error\n            turn_right()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n        elif error < 0: # robot is to the right of intersection (make a big left turn)\n            error = 3000/error\n            turn_left()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n\n     # too far left\n    if error > 0:\n        turn_right()\n        line = 1 # line is to the right\n         # turn on left headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n     # too far right\n    if error < 0:\n        turn_left()\n        line = 0 # line is to the left\n         #turn on right headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n \n \n     # reset speed and headlights\n    CutebotPro.turn_off_all_headlights()\n    lwheel = 10\n    rwheel = 10\n \n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n    basic.pause(5)\n    magnet()\n \n#basic.forever(on_forever)\n#Run line follow till magnet detected then stop\nwhile (mag == 0):\n    follow_line()\n # stop robot\nCutebotPro.pwm_cruise_control(0, 0)\nbasic.pause(100)\nCutebotPro.turn_off_all_headlights()\n\n\n\n"],[0,"#mag"]],"start1":0,"start2":0,"length1":3089,"length2":4}]}]},{"timestamp":1744243414607,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[-1,"## MAGNET DETECTION\n#magnet checking function\ndef checkMagnet():\n force = abs(input.magnetic_force(Dimension.X))\n return force\n\nmagnet = 0\n\n"],[0,"## L"]],"start1":0,"start2":0,"length1":144,"length2":4},{"diffs":[[0,"ror = 0\n"],[1,"# which line are we following:\nline = -1 # 0 is left, 1 is right\n"],[0,"maxturns"]],"start1":59,"start2":59,"length1":16,"length2":81},{"diffs":[[0,"f turn_r"],[1,"ight"],[0,"():\n    "]],"start1":263,"start2":263,"length1":16,"length2":20},{"diffs":[[0,"f turn_l"],[1,"eft"],[0,"():\n    "]],"start1":561,"start2":561,"length1":16,"length2":19},{"diffs":[[0,"    "],[-1,"mag = 0\n    if checkMagnet("],[1,"global mag\n    if abs(input.magnetic_force(Dimension.X)"],[0,") >="]],"start1":876,"start2":876,"length1":35,"length2":63},{"diffs":[[0,"00)\n"],[-1,"        return mag\n"],[0," \n\nd"]],"start1":1122,"start2":1122,"length1":27,"length2":8},{"diffs":[[0,"l, error"],[1,", line"],[0,"\n \n    #"]],"start1":1172,"start2":1172,"length1":16,"length2":22},{"diffs":[[0,"          turn_r"],[1,"ight"],[0,"()\n            b"]],"start1":1843,"start2":1843,"length1":32,"length2":36},{"diffs":[[0,"          turn_l"],[1,"eft"],[0,"()\n            b"]],"start1":2112,"start2":2112,"length1":32,"length2":35},{"diffs":[[0,"  turn_r"],[-1,"()"],[1,"ight()\n        line = 1 # line is to the right"],[0,"\n       "]],"start1":2305,"start2":2305,"length1":18,"length2":62},{"diffs":[[0,"  turn_l"],[-1,"()"],[1,"eft()\n        line = 0 # line is to the left"],[0,"\n       "]],"start1":2511,"start2":2511,"length1":18,"length2":60},{"diffs":[[0,"ause(5)\n"],[1,"    magnet()\n"],[0," \n#basic"]],"start1":2844,"start2":2844,"length1":16,"length2":29},{"diffs":[[0,"ile (mag"],[-1,"net()"],[0," == 0):\n"]],"start1":2944,"start2":2944,"length1":21,"length2":16},{"diffs":[[0,"\n\n\n#"],[-1,"# START MAZE\n"],[1,"magnet checking function \ndef checkMagnet():\n force= abs(input.magnetic_force(Dimension.X))\n force= abs(input.magnetic_force(Dimension.STRENGTH))<= 325;\n return force\n  \n#threshold for maze entrance:\nmagnet = 0\nforce = checkMagnet()\nif 30> abs(252-force):\n   mazeStart= True\n   magnet+=1\n\n\nif mazeStart==True:\n    "],[0,"Cute"]],"start1":3082,"start2":3082,"length1":21,"length2":322},{"diffs":[[0,"its.CM)\n"],[1,"    "],[0,"basic.pa"]],"start1":3486,"start2":3486,"length1":16,"length2":20}]}]},{"timestamp":1744244011681,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.py","patch":[{"diffs":[[0,"def "],[-1,"magnet_detect():\n    mag = 0\n   "],[1,"checkMagnet():\n"],[0," for"]],"start1":46,"start2":46,"length1":40,"length2":23},{"diffs":[[0,"))\n "],[-1,"   if force >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n        return mag"],[1,"return force\n\nmagnet = 0"],[0,"\n\n##"]],"start1":110,"start2":110,"length1":227,"length2":32},{"diffs":[[0,")\n \n"],[-1,"#turns for line following\n"],[0,"def "]],"start1":332,"start2":332,"length1":34,"length2":8},{"diffs":[[0,"ause(10)"],[1,"\n"],[0,"    "],[1," \ndef magnet():\n    mag = 0\n    if checkMagnet() >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n        return mag\n "],[0,"\n\ndef fo"]],"start1":915,"start2":915,"length1":20,"length2":279},{"diffs":[[0," (magnet"],[-1,"_detect"],[0,"() == 0)"]],"start1":2894,"start2":2894,"length1":23,"length2":16},{"diffs":[[0,"alse"],[-1,"\nmagnet_count = 1"],[0,"\n\n#f"]],"start1":3386,"start2":3386,"length1":25,"length2":8},{"diffs":[[0,"e magnet"],[-1,"_count"],[0," < 3:\n  "]],"start1":3916,"start2":3916,"length1":22,"length2":16},{"diffs":[[0,"    "],[-1,"mag = magnet_detec"],[1,"force = checkMagne"],[0,"t()\n"]],"start1":3930,"start2":3930,"length1":26,"length2":26},{"diffs":[[0," if "],[-1,"mag == 1"],[1,"30> abs(252-force)"],[0,":\n  "]],"start1":3977,"start2":3977,"length1":16,"length2":26},{"diffs":[[0,"  magnet"],[-1,"_count"],[0,"+=1\n    "]],"start1":4006,"start2":4006,"length1":22,"length2":16},{"diffs":[[0,"   if magnet"],[-1,"_count"],[0," == 2:\n     "]],"start1":4057,"start2":4057,"length1":30,"length2":24},{"diffs":[[0,"(4)\n"],[-1,"    \n    #end mazed navigation\n    if magnet_count == 3:\n        maze_exit = True"],[0,"\n   "]],"start1":4098,"start2":4098,"length1":89,"length2":8}]}]},{"timestamp":1744244470068,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block><"],[0,"/xml>"]],"start1":278,"start2":278,"length1":13,"length2":163}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":320,"start2":320,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1743615567696,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"pxt-on-start\" x=\"1\" y=\"-150\"><statement name=\"HANDLER\"><block type=\"CutebotPro_setBlockCnt\"><field name=\"CutebotProDistanceUnits\">CutebotProDistanceUnits.Cm</field><value name=\"length\"><shadow type=\"math_number\"><field name=\"NUM\">30</field></shadow></value></block></statement></block><block type=\"device_forever\" x=\"1\" y=\"-10\"><statement name=\"HANDLER\"><block type=\"CutebotPro_runBlockCnt\"><value name=\"cnt\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"CutebotPro_trolleySteering\"><field name=\"CutebotProTurn\">CutebotProTurn.RightInPlace</field><field name=\"CutebotProAngle\">CutebotProAngle.Angle90</field><next><block type=\"CutebotPro_runBlockCnt\"><value name=\"cnt\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"CutebotPro_trolleySteering\"><field name=\"CutebotProTurn\">CutebotProTurn.RightInPlace</field><field name=\"CutebotProAngle\">CutebotProAngle.Angle90</field><next><block type=\"CutebotPro_runBlockCnt\"><value name=\"cnt\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1744043853352,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"15\" y=\"-148\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"CutebotPro.set_block_cnt(30, CutebotProDistanceUnits.CM)\n\ndef on_forever():\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(1)\nbasic.forever(on_forever)\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1744216783950,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"CutebotPro.set_block_cnt(30, CutebotProDistanceUnits.CM)\n\ndef on_forever():\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(2)\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, CutebotProAngle.ANGLE90)\n    CutebotPro.run_block_cnt(1)\nbasic.forever(on_forever)\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1744218678013,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"if mazeStart==true:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\npath = []\nfirst_move_done = False\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\nwhile True:\n    if not first_move_done:\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n    if left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744231179907,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"if mazeStart==True:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 14, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n#originate empty path taken\npath = []\nfirst_move_done = False\n\n\n\n#fill in functions for turning and moving forward (replace later!!)\n\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 25, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\nwhile True:\n    if not first_move_done:\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n    if left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744232997277,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"if mazeStart==True:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n\n#originate empty path taken\npath = []\nfirst_move_done = False\nmagnet = False\n\n#fill in functions for turning and moving forward (replace later!!)\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30.7, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\n\nwhile magnet == False:\n    if first_move_done == False:\n        move_forward()\n        path.append(1)\n        first_move_done = True\n        continue\n\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n        break\n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n    if left > 15:\n        turn_left()\n        move_forward()\n        path.append(2)\n    elif front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744235572965,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"if mazeStart==True:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n\n#originate empty path taken\npath = []\nfirst_move_done = False\nmagnet = False\n\n\n#fill in functions for turning and moving forward (replace later!!)\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30.7, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\n\nwhile magnet == False:\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_right()\n    front = check_distance()\n    basic.pause(100)\n\n    # Stop if maze ends (huge opening ahead)\n    if front > 100:\n        serial.write_line(\"Maze end detected! Stopping.\")\n    \n\n    # Look right\n    turn_right()\n    right = check_distance()\n    basic.pause(100)\n\n    # Face forward again\n    turn_left()\n    basic.pause(100)\n\n    # Maze logic\n\n    if front > 15:\n        move_forward()\n        path.append(1)\n    elif right > 15:\n        turn_right()\n        move_forward()\n        path.append(3)\n    else:\n        # Dead end\n        turn_left()\n        turn_left()\n        move_forward()\n        path.append(0)\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744237453476,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"if mazeStart==True:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n\n#originate empty path taken\npath = []\nfirst_move_done = False\nmagnet = False\n\n\n#fill in functions for turning and moving forward (replace later!!)\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30.7, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\n\nwhile magnet == False:\n    # Look left\n    turn_left()\n    left = check_distance()\n    basic.pause(100)\n    if left > 16:\n        move_forward()\n        path.append(2)\n    else:\n    # Face forward again\n        turn_right()\n        front = check_distance()\n        basic.pause(100)\n        if front > 16:\n            move_forward()\n            path.append(1)\n        else:\n            # Look right\n            turn_right()\n            right = check_distance()\n            basic.pause(100)\n            if right > 16:\n                turn_right()\n                move_forward()\n                path.append(3)\n            else:\n                # Dead end\n                turn_right()\n                move_forward()\n                path.append(0)\n\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744242295613,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"#magnet checking function \ndef checkMagnet():\n force= abs(input.magnetic_force(Dimension.X))\n force= abs(input.magnetic_force(Dimension.STRENGTH))<= 325;\n return (force)\n  \n#threshold for maze entrance:\nif 30> abs(252-force):\n   mazeStart= True\n\n\nif mazeStart==True:\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n#originate empty path taken\npath = []\nfirst_move_done = False\nmagnet = False\n\n#functions for turning and moving forward\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30.7, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\n#maze navigation\nwhile magnet == False:\n    force = checkMagnet()\n    if 30> abs(252-force):\n       magnetFound= True\n    else:   \n        # Look left\n        turn_left()\n        left = check_distance()\n        basic.pause(100)\n        if left > 16:\n            move_forward()\n            path.append(2)\n        else:\n        # Face forward again\n            turn_right()\n            front = check_distance()\n            basic.pause(100)\n            if front > 16:\n                move_forward()\n                path.append(1)\n            else:\n                # Look right\n                turn_right()\n                right = check_distance()\n                basic.pause(100)\n                if right > 16:\n                    turn_right()\n                    move_forward()\n                    path.append(3)\n                else:\n                    # Dead end\n                    turn_right()\n                    move_forward()\n                    path.append(0)\n\n                    #Depth first algorithm\n                    for i in range(len(path)):\n                        if path[i] == 2:\n                            ...\n                        elif path[i] == 3:\n                            ...\n\n\n\n\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}},{"timestamp":1744244095702,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables><block type=\"ultrasonic\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"0\" y=\"0\"><field name=\"SonarUnit\">SonarUnit.Centimeters</field></block></xml>","main.ts":"","README.md":"","main.py":"## MAGNET DETECTION\n#magnet checking function\ndef checkMagnet():\n force = abs(input.magnetic_force(Dimension.X))\n return force\n\n\n## LINE FOLLOWING\n#set variables\nlwheel = 20\nrwheel = 20\nerror = 0\nmaxturnspeed = 50\n\n#magnet present\nmag = 0\n\n# set starting speed\nCutebotPro.pwm_cruise_control(lwheel, rwheel)\nbasic.pause(50)\n \ndef turn_r():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel + (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel - (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\ndef turn_l():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel - (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel + (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\n     \ndef magnet():\n    mag = 0\n    force = abs(input.magnetic_force(Dimension.X))\n    if force >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n        return mag,forcw\n\ndef follow_line():\n    global lwheel, rwheel, error\n \n    # get the line offset\n    error = CutebotPro.get_offset()\n \n    # make the left side of line the center\n    # error = error + 1000\n \n    # if detects no line\n    if abs(error) == 3000:\n        lwheel = 0\n        rwheel = 0\n \n         #turn on both headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n     # if detects a big line\n     #### Intersection ####\n     # if detects a big line (error is less than 100)\n    if abs(error) < 100:\n        if error > 0: # robot is to the left of intersection (make a big right turn)\n            error = 3000/error\n            turn_r()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n        elif error < 0: # robot is to the right of intersection (make a big left turn)\n            error = 3000/error\n            turn_l()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n\n     # too far left\n    if error > 0:\n        turn_r()\n         # turn on left headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n     # too far right\n    if error < 0:\n        turn_l()\n         #turn on right headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n \n \n     # reset speed and headlights\n    CutebotPro.turn_off_all_headlights()\n    lwheel = 10\n    rwheel = 10\n \n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n    basic.pause(5)\n \n#basic.forever(on_forever)\n#Run line follow till magnet detected then stop\nwhile (magnet() == 0):\n    follow_line()\n # stop robot\nCutebotPro.pwm_cruise_control(0, 0)\nbasic.pause(100)\nCutebotPro.turn_off_all_headlights()\n\n\n\n## START MAZE\nCutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\nbasic.pause(1000)\n\n#originate maze matrix\nN = 5\nM = 6\nfield = []\nfor j in range(N):\n    row = []\n    for i in range (M):\n        row.append(0)\n    field.append(row)\n\n#originate empty path taken\npath = []\nfirst_move_done = False\nmaze_exit = False\nmagnet = 1\n\n#functions for turning and moving forward\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 95)\n    basic.pause(100)\n\ndef move_forward():\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 30.7, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\n#maze navigation before exit magnet is located \nwhile magnet < 3:\n    force = checkMagnet()\n    #magnet found\n    if 30> abs(252-force):\n       magnet+=1\n       #magnet inside maze located\n       if magnet == 2:\n           path.append(4)\n\n    #continue maze navigation\n    else:   \n        # Look left\n        turn_left()\n        left = check_distance()\n        basic.pause(100)\n        if left > 16:\n            move_forward()\n            path.append(2)\n        else:\n        # Face forward again\n            turn_right()\n            front = check_distance()\n            basic.pause(100)\n            if front > 16:\n                move_forward()\n                path.append(1)\n            else:\n                # Look right\n                turn_right()\n                right = check_distance()\n                basic.pause(100)\n                if right > 16:\n                    turn_right()\n                    move_forward()\n                    path.append(3)\n                else:\n                    # Dead end\n                    turn_right()\n                    move_forward()\n                    path.append(0)\n\n                    #Depth first algorithm\n                    for i in range(len(path)):\n                        if path[i] == 2:\n                            ...\n                        elif path[i] == 3:\n                            ...\n\n\n\n\n\n# Output path after reaching end\nserial.write_line(\"Maze path taken:\")\nfor step in path:\n    if step == 1:\n        serial.write_line(\"Forward\")\n    elif step == 2:\n        serial.write_line(\"Left\")\n    elif step == 3:\n        serial.write_line(\"Right\")\n    elif step == 0:\n        serial.write_line(\"Backtrack\")\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v1.0.34\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"6.0.8\",\n        \"pxt\": \"9.0.6\"\n    },\n    \"preferredEditor\": \"pyprj\"\n}\n"}}],"shares":[],"lastSaveTime":1744244780167}